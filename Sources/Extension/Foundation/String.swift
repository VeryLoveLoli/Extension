//
//  String.swift
//  
//
//  Created by Èü¶ÁÉΩ‰º† on 2021/11/13.
//

import Foundation
import Print

// MARK: - Âå∫Èó¥Â≠óÁ¨¶‰∏≤

public extension String {
    
    /**
     Ëé∑ÂèñÁ¥¢ÂºïÂ≠óÁ¨¶‰∏≤ÔºàÁî®‰∫é`String.count`ÁöÑ`0..<count`Ôºâ
     */
    subscript(_ i: Int) -> String {
        
        return self[i ..< i + 1]
    }
    
    /**
     Ëé∑ÂèñÁ¥¢ÂºïÂå∫Èó¥Â≠óÁ¨¶‰∏≤ÔºàÁî®‰∫é`String.count`ÁöÑ`0..<count`Ôºâ
     */
    subscript(_ range: Range<Int>) -> String {
        
        if count == 0 || range.lowerBound >= count {
            
            return ""
        }
        
        let l = min(range.upperBound, count) - range.lowerBound
        
        let start = index(startIndex, offsetBy: range.lowerBound)
        let end = index(start, offsetBy: l)
        
        return String(self[start..<end])
    }
    
    /**
     Ëé∑ÂèñÁ¥¢ÂºïÂå∫Èó¥Â≠óÁ¨¶‰∏≤
     
     Ê≥®ÊÑèÔºöË°®ÊÉÖÁ¨¶Âè∑ÈïøÂ∫¶Âç†2‰∏™ÈïøÂ∫¶
     ‰æãÂ¶ÇÔºö
     ```
     let string = "üòÑ"
     let v1 = string[NSRange(location: 0, length: 1)]
     let v2 = string[NSRange(location: 0, length: 2)]
     print(v1)
     print(v2)
     ```
     ËæìÂá∫Ôºö
     
     üòÑ
     `v2`ÊâçËÉΩÊ≠£Á°ÆËæìÂá∫
     */
    subscript(_ range: NSRange) -> String {
        
        if let rangeIndex = self.range(range) {
            
            return String(self[rangeIndex])
        }
        
        return ""
    }
}

// MARK: - ÂàõÂª∫Êñá‰ª∂Â§π

public extension String {
    
    /**
     Êñá‰ª∂Â§πË∑ØÂæÑÂàõÂª∫
     */
    func createDirectory() -> Bool {
                
        var path = self
        
        if let last = path.last, last != "/" {
            
            path += "/"
        }
        
        guard !FileManager.default.fileExists(atPath: path) else { return true }
        
        do {
            
            try FileManager.default.createDirectory(atPath: path, withIntermediateDirectories: true, attributes: nil)
            
        } catch {
            
            Print.error(error)
            
            return false
        }
        
        return true
    }
    
    /**
     ‰ªéÊñá‰ª∂Ë∑ØÂæÑÂàõÂª∫Êñá‰ª∂Â§π
     */
    func createDirectoryFromFilePath() -> Bool {
                
        if FileManager.default.fileExists(atPath: self) {
            
            return true
        }
        
        var pathArray = self.components(separatedBy: "/")
        
        if pathArray.count >= 2 {
            
            pathArray.removeLast()
            
            var directoryPath = pathArray.joined(separator: "/")
            
            if let last = directoryPath.last, last != "/" {
                
                directoryPath += "/"
            }
            
            if !FileManager.default.fileExists(atPath: directoryPath)  {
                
                do {
                    
                    try FileManager.default.createDirectory(atPath: directoryPath, withIntermediateDirectories: true, attributes: nil)
                    
                } catch {
                    
                    Print.error(error)
                    
                    return false
                }
            }
        }
        
        return true
    }
}

// MARK: - Â≠óÁ¨¶‰∏≤URLÁºñÁ†Å

public extension String {
    
    /// URLÁºñÁ†ÅÈõÜ
    static let URLEncodeSet = CharacterSet.init(charactersIn: " !*'();:@&=+$,/?%#[]{}\"").inverted
    
    /**
     URLÁºñÁ†Å
     */
    func urlEncode() -> String {
        
        return addingPercentEncoding(withAllowedCharacters: String.URLEncodeSet) ?? ""
    }
}

// MARK: - ÊñáÂ≠óÈõÜÂêà

public extension String {
    
    /**
     ‰∏≠ÊñáÈõÜÂêà
     */
    static func chineseSet() -> [String] {
        
        return unicodeSet(0x4e00, end: 0x9fa5) + unicodeSet(0x3400, end: 0x4db5)
    }

    /**
     Êó•ÊñáÈõÜÂêà
     */
    static func japaneseSet() -> [String] {
        
        return unicodeSet(0x0800, end: 0x4e00)
    }

    /**
     Èü©ÊñáÈõÜÂêà
     */
    static func koreanSet() -> [String] {
        
        return unicodeSet(0x3130, end: 0x318f) + unicodeSet(0xac00, end: 0xd7a3)
    }

    /**
     `unicode`ÁºñÁ†ÅÈõÜÂêà
     
     - parameter    start:  ÂºÄÂßãÁºñÁ†Å
     - parameter    end:    ÁªìÊùüÁºñÁ†Å
     */
    static func unicodeSet(_ start: UInt16, end: UInt16) -> [String] {
        
        var array: [String] = []
        
        for item in start...end {
            
            var bytes: [UInt8] = [0,0]
            
            bytes[0] = UInt8((item<<0)>>8)
            bytes[1] = UInt8((item<<8)>>8)
            
            let data = Data.init(bytes: bytes, count: bytes.count)
            
            if let string = String.init(data: data, encoding: .unicode) {
                
                array.append(string)
            }
            else {
                
                Print.error("\(item): ËΩ¨Êç¢Â§±Ë¥•")
            }
        }
        
        return array
    }
}

// MARK: - Ê≠£Âú®ÊõøÊç¢

public extension String {
    
    /**
     Ê≠£ÂàôÊõøÊç¢
     
     - parameter    pattern:            Ë°®ËææÂºè
     - parameter    options:            ÈÄâÈ°π
     - parameter    optionsMatches:     ÂåπÈÖçÈÄâÈ°π
     - parameter    with:               Êñ∞ÂÜÖÂÆπ
     */
    func regular(_ pattern: String, options: NSRegularExpression.Options = [], optionsMatches: NSRegularExpression.MatchingOptions = [], with: String) -> String {
        
        do {
            
            let regular = try NSRegularExpression(pattern: pattern, options: options)
            
            return regular.stringByReplacingMatches(in: self, options: optionsMatches, range: NSRange(location: 0, length: self.count), withTemplate: with)
            
        } catch {
            
            Print.error(error.localizedDescription)
            
            return ""
        }
    }
}

// MARK - ËåÉÂõ¥ËΩ¨Êç¢

extension String {
     
    /**
     `Range<String.Index>` ËΩ¨ `NSRange`
     
     - parameter    range:      Á¥¢ÂºïËåÉÂõ¥
     */
    func range(_ range: Range<String.Index>) -> NSRange {
        
        let from = range.lowerBound.samePosition(in: utf16)!
        let to = range.upperBound.samePosition(in: utf16)!
        
        return NSRange(location: utf16.distance(from: utf16.startIndex, to: from),
                       length: utf16.distance(from: from, to: to))
    }
     
    /**
     `NSRange` ËΩ¨ `Range<String.Index>`
     
     - parameter    range:      ËåÉÂõ¥
     */
    func range(_ range: NSRange) -> Range<String.Index>? {
        
        if let from16 = utf16.index(utf16.startIndex, offsetBy: range.location, limitedBy: utf16.endIndex),
           let to16 = utf16.index(from16, offsetBy: range.length, limitedBy: utf16.endIndex),
           let from = String.Index(from16, within: self),
           let to = String.Index(to16, within: self) {
            
            return from ..< to
        }
        
        return nil
    }
}

// MARK: - Ê≠£ÂàôÊêúÁ¥¢

extension String {
    
    /**
     ÂåπÈÖç
     */
    struct Match {
        
        /// Á±ªÂûã
        var type: NSTextCheckingResult.CheckingType
        /// ËåÉÂõ¥
        var range: NSRange
        /// ÂÜÖÂÆπ
        var content: String
        
    }
    
    /**
     Ê≠£ÂàôÊêúÁ¥¢
     
     - parameter    pattern:            Ë°®ËææÂºè
     - parameter    options:            ÈÄâÈ°π
     - parameter    optionsMatches:     ÂåπÈÖçÈÄâÈ°π
     
     - returns  ÂåπÈÖçÂàóË°®
     */
    func regular(_ pattern: String, options: NSRegularExpression.Options = [], optionsMatches: NSRegularExpression.MatchingOptions = []) -> [String.Match] {
        
        do {
            
            let regular = try NSRegularExpression(pattern: pattern, options: options)
            
            let list = regular.matches(in: self, options: [], range: NSRange(location: 0, length: count))
            
            var matches: [String.Match] = []
            
            for item in list {
                
                let match = String.Match(type: item.resultType, range: item.range, content: self[item.range])
                
                matches.append(match)
            }
            
            return matches
            
        } catch {
            
            Print.error(error.localizedDescription)
            
            return []
        }
    }
}
